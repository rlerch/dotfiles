# Read File Into Vector
snippet readfile
	std::vector<char> v;
	if (FILE *${2:fp} = fopen(${1:"filename"}, "r")) {
		char buf[1024];
		while (size_t len = fread(buf, 1, sizeof(buf), $2))
			v.insert(v.end(), buf, buf + len);
		fclose($2);
	}${3}
# std::map
snippet map
	std::map<${1:key}, ${2:value}> map${3};
# std::vector
snippet vector
	std::vector<${1:char}> v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} {
		${2}
	} /* $1 */
# Class
snippet cl
	class ${1:`Filename('$1_t', 'name')`}
	{
	public:
		$1(${2:arguments});
		~$1();
	
	private:
		${3:/* data */}
	};
# QObject class
snippet qcl
	class ${1:`Filename('$1_t', 'name')`} : public ${2:QObject}
	{
	    Q_OBJECT
	public:
		$1(${3:QObject* parent = 0});
	
	private:
		${4:/* data */}
	};
	
# C++ For Loop
snippet for
	for(${1}; ${2}; ${3}) {
		${4:/* code */}
	}${5:/* end for */}
# switch statement
snippet switch
	switch(${1}) {
	case ${2:/* case */}:
	    ${3:/* code */}
	    break;${4}
	default: ;
	}${5:/* end switch */}
# case statement for a switch
snippet case
	case ${1:/* case */}:
	    ${2:/* code */}
	    break;${3}
snippet qtestclass
	#ifndef ${1:`toupper(Filename('', 'UNTITLED'))`}_H
	#define $1_H

	#include <QObject>
	#include <QtTest>

	class ${2:`Filename()`} : public QObject
	{
	    Q_OBJECT
	public:
	    $2(QObject* parent = 0) : QObject(parent) {}

	private slots:
	    void init();
	    void cleanup();

	private:
	    
	};

	#endif /* $1_H */
snippet qtestclassdef
	#include "${1:`Filename()`.h}"

	void ${2:TestClass}::init()
	{
	    
	}

	void $2::cleanup()
	{
	    
	}

